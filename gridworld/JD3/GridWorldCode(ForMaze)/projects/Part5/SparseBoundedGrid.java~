import info.gridworld.grid.Grid;
import info.gridworld.grid.AbstractGrid;
import info.gridworld.grid.Location;

import java.util.ArrayList;

/**
 *  A <code>BoundedGrid</code> is a rectangular grid with a
 *  finite number of rows and columns <br />
 *
 */

public class SparseBoundedGrid {
    private SparseGridNode[] occupantArray;
	private int numRows;
	private int numCols;
	public SparseBoundedGrid(int row, int col) {
		if (row <= 0) {
			throw new IllegalArgumentException("row <= 0");
		}
		if (col <= 0) {
			throw new IllegalArgumentException("col <= 0");
		}
		numRows = row;
		numCols = col;
	}

	public int getNumRows() {
		return numRows;
	}

	public int getNumCols() {
		return numCols;
	}

	public boolean isValid(Location loc) {
        return 0 <= loc.getRow() && loc.getRow() < getNumRows()  && 0 <= loc.getCol() && loc.getCol() < getNumberCols();
	}

    public ArrayList<Location> getOccupiedLocations()
    {
        ArrayList<Location> theLocations = new ArrayList<Location>();

        // Look at all grid locations.
        for (int r = 0; r < getNumRows(); r++) {
            SparseGridNode temp = occupantArray[r];
            while (temp != null) {
                Location loc = new Location(r, p.getColumn());
                theLocations.add(loc);
                temp = temp.getNext();
            }
        }
        return theLocations;
    }
    
    public E get(Location loc) {
        if (!isValid(loc) {
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
        }
        
        SparseGridNode temp = occupantArray[loc.getRow()];
        while (temp != null) {
            if (loc.getCol() == temp.getColumn()) {
                return (E)temp.getOccupant();
            }
            temp = temp.getNext();
        }
        return null;
    }

    public E put(Location loc, E obj){
        if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
        if (obj == null)
            throw new NullPointerException("obj == null");

        // Add the object to the grid.
        E oldOccupant = get(loc);
        occupantArray[loc.getRow()][loc.getCol()] = obj;
        return oldOccupant;
    }

}
